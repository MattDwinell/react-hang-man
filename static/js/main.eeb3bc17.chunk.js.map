{"version":3,"sources":["Components/Button.js","Components/Header.js","Components/Letter.js","Components/Word.js","Components/Display.js","Components/Input.js","Components/Modal.js","App.js","reportWebVitals.js","index.js"],"names":["Button","gameInProgress","onClick","className","Header","title","toggleGame","defaultProps","Letter","letter","color","display","includes","style","Word","letters","guesses","split","map","l","i","toUpperCase","propTypes","Display","gameState","guessedLetters","wrongGuesses","Input","makeGuess","enabled","reset","handleChange","totalGuesses","type","onKeyUp","placeholder","disabled","Modal","message","closeModal","cursor","css","App","useState","Words","setLetters","setGameInProgress","mounted","setMounted","setGuesses","setWrongGuesses","value","setValue","setReset","setMessage","console","log","chosenWord","Math","floor","random","length","chooseWord","checkLetter","e","key","test","tempGuesses","tempWrong","predGuess","predWrong","tempCorrectLetters","gameWin","forEach","gameStatusCheck","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.eeb3bc17.chunk.js","sourcesContent":["import propTypes from 'prop-types'\r\n\r\nconst Button =({gameInProgress, onClick}) => {\r\n\r\n    return (\r\n             <button onClick = {onClick} className = 'btn'>{gameInProgress ? 'Reset Game' : 'Start Game'}</button>\r\n    )\r\n}\r\n// Button.defaultProps = {\r\n//     gameInProgress: false\r\n// }\r\n\r\nButton.propTypes = {\r\ngameInProgress : propTypes.bool\r\n}\r\n\r\nexport default Button\r\n","import PropTypes from 'prop-types'\r\nimport Button from './Button'\r\nconst Header = ({title, gameInProgress, toggleGame}) => {\r\n\r\n\r\n\r\n    return (\r\n        <header className = 'header'>\r\n            <h1> {title}</h1>\r\n            <Button onClick = {toggleGame} gameInProgress = {gameInProgress}/>\r\n            \r\n        </header>\r\n    )\r\n}\r\n\r\nHeader.propTypes = {\r\ntitle: PropTypes.string,\r\ngameInProgress: PropTypes.bool\r\n}\r\nHeader.defaultProps = {title: 'hangman', gameInProgress: false}\r\n\r\nexport default Header\r\n","const Letter = ({letter, display}) => {\r\n    //console.log(display);\r\n    //console.log(letter);\r\n    //console.log(display.includes(letter));\r\n    const color = display.includes(letter) ? 'red' : 'blue';\r\n    return (\r\n        <span className = 'letter' style={{color:color}}>\r\n            { letter}  \r\n        </span>\r\n    )\r\n}\r\n\r\nexport default Letter\r\n","import Letter from './Letter'\r\nconst Word =({letters, guesses})=> {\r\n    // console.log(guesses);\r\n    if(letters == null){\r\n        letters = 'Press Start!';\r\n    }\r\n\r\n    return (\r\n        <div className = 'letterWrapper'>\r\n            {letters.split('').map((l, i)=>(<Letter letter={l.toUpperCase()} key={i} display={guesses}/>))}\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nLetter.propTypes = {\r\n\r\n}\r\nWord.defaultProps = {\r\n    letters : ['Press Start!'],\r\n    guesses : ''\r\n}\r\n\r\nexport default Word\r\n\r\n","import PropTypes from 'prop-types'\r\n\r\nconst Display = ({gameState, guessedLetters, wrongGuesses}) => {\r\n    return (\r\n        <div>\r\n            {gameState ? 'game in progress' : 'game not in progress'}\r\n           <p> {guessedLetters}</p>\r\n           <p>{wrongGuesses}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nDisplay.propTypes = {\r\n\r\n}\r\n\r\nexport default Display\r\n","import PropTypes from 'prop-types'\r\n\r\nconst Input = ({makeGuess, enabled,reset, handleChange, totalGuesses}) => {\r\n    return (\r\n        <input type= {reset ? \"reset\" : \"text\"}  className = 'input' onKeyUp={makeGuess} placeholder = 'Enter letters here' disabled={!enabled}>\r\n            \r\n        </input>\r\n    )\r\n}\r\n\r\nInput.propTypes = {\r\n\r\n}\r\n\r\nexport default Input\r\n","import PropTypes from 'prop-types'\r\nimport {FaTimes} from 'react-icons/fa'\r\nconst Modal = ({message, display, closeModal}) => {\r\n    if(!closeModal) closeModal = ()=>{return null}\r\n    return (\r\n\r\n        <div className = {`modal ${display ? 'show' : 'hide'} ${message.includes('won')? 'won' : 'lost'}`}>\r\n            <p>{message}<FaTimes onClick = {closeModal} className = 'close-modal' style={{color:'red', cursor: 'pointer'}} /> </p>\r\n        </div>\r\n    )\r\n}\r\n\r\nModal.propTypes = {\r\n\r\n}\r\nModal.css ={\r\n    display: 'none'\r\n}\r\n\r\nModal.defaultProps = {\r\n    message: 'Nothing to show here',\r\n    closeModal : function(){return null}\r\n}\r\n\r\nexport default Modal\r\n","import React from 'react';\nimport Header from './Components/Header'\nimport Word from './Components/Word'\nimport {useState} from 'react'\nimport Display from './Components/Display'\nimport Input from './Components/Input'\nimport Modal from './Components/Modal'\n\n/*function App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  ); \n}*/\nfunction App(){\n  const [Words] = useState(['ANODYNE', 'MELANCHOLIA', 'APHASIA', 'BURBLING', 'ZAFTIG'])\n  const[letters, setLetters] = useState(['merry'])\n  const[gameInProgress, setGameInProgress] = useState(false);\n  const [mounted, setMounted] = useState(false);\n  const[guesses, setGuesses] = useState('');\n  const[wrongGuesses, setWrongGuesses] = useState(0)\n  const [value, setValue] = useState('')\n  const[reset, setReset] = useState(false);\n  const[message,setMessage] = useState('');\n\n  const chooseWord = ()=>{\n    console.log(Words);\n    let chosenWord = Words[Math.floor(Math.random() * Words.length)]\n    setLetters(chosenWord);\n    console.log(letters);\n  }\n\n  const toggleGame = ()=>{\n    console.log('in toggle game function' + gameInProgress);\n    if(gameInProgress){\n      setGameInProgress(false);\n      setGuesses('');\n      setReset(true);\n      setWrongGuesses(0);\n    }else{\n      setGuesses('');\n      setWrongGuesses(0);\n       setGameInProgress(true);\n       chooseWord();\n       setReset(false);\n    }\n    console.log(gameInProgress);\n  }\n  const updateValue = ()=>{\nsetValue(guesses);\n  }\n  const startNewGame = ()=>{\n    console.log('hi');\n    setMounted(false);\n    toggleGame();\n  }\n\nconst gameStatusCheck = (predGuess, predWrong) =>{\n  console.log(letters);\n  console.log(predGuess);\n  console.log(predWrong);\n  let tempCorrectLetters = letters.split('');\n  let gameWin = true;\n  tempCorrectLetters.forEach(letter => {\n    if(! predGuess.includes(letter)) gameWin = false;\n  });\n  if(gameWin){\n    console.log('game won!');\n    setMessage('You won! Close this message to play again.');\n    setMounted(true);\n    //setReset(true);\n    //setGameInProgress(false);\n    toggleGame();\n  }else{\nif(predWrong >= 6){\n  console.log('game lost. womp womp womp');\n  setMessage('Out of guesses! Close to play again.');\n  setMounted(true);\n  toggleGame();\n\n}\n  }\n}\n\n  const checkLetter = (e)=>{\n    //  console.log('hi');\n    // console.log(gameInProgress); \n     console.log(e.key)\n    if(gameInProgress){\n  // console.log('game in progress');\n    // console.log(/[a-zA-Z]/g.test(e.key.toUpperCase()))\n    if(! /[^a-zA-Z]/g.test(e.key.toUpperCase()) && e.key.length === 1 && !guesses.includes(e.key)){\n      let tempGuesses = guesses;\n      console.log(tempGuesses)\n      tempGuesses = tempGuesses + e.key.toUpperCase();\n      console.log(tempGuesses);\n\n      setGuesses( tempGuesses)\n      console.log('acceptable keystroke');\n      console.log(e.key);\n      let tempWrong = wrongGuesses;\n      if(! letters.includes(e.key.toUpperCase())){\n        tempWrong++;\n        setWrongGuesses(wrongGuesses + 1);\n        console.log(wrongGuesses);\n      }\n      gameStatusCheck(tempGuesses, tempWrong);\n\n    }else{\n      console.log('unacceptable keystroke');\n    }\n    } else{\n      console.log('thinks game is not in progress');\n    } \n  }\n\n  return(\n    <div className = 'container' >\n\n      <Header toggleGame = {toggleGame} gameInProgress = {gameInProgress}/>\n      <Word guesses = {guesses} letters= { gameInProgress ? letters : null}/>\n      <Input wrongGuesses = {wrongGuesses} reset = {reset} value= {value} handleChange = {updateValue} enabled={gameInProgress} makeGuess={(e)=>{checkLetter(e)}}/>\n      <Display gameState = {gameInProgress} guessedLetters = {guesses} wrongGuesses = {wrongGuesses}/>\n      <Modal closeModal = {startNewGame} message={message} display={mounted}/>\n    </div>\n  )  \n\n\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <App />,document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}