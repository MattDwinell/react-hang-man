{"version":3,"sources":["Components/Button.js","Components/Header.js","Components/Letter.js","Components/Word.js","Components/Display.js","Components/Input.js","Components/Modal.js","images/hangman0.bmp","images/hangman1.bmp","images/hangman2.bmp","images/hangman3.bmp","images/hangman4.bmp","images/hangman5.bmp","images/hangman6.bmp","Components/Image.js","App.js","reportWebVitals.js","index.js"],"names":["Button","gameInProgress","onClick","className","Header","title","toggleGame","defaultProps","Letter","letter","color","display","includes","style","Word","letters","guesses","split","map","l","i","toUpperCase","propTypes","Display","wins","losses","gameState","guessedLetters","wrongGuesses","float","Input","makeGuess","enabled","reset","handleChange","totalGuesses","type","onKeyUp","placeholder","disabled","Modal","message","closeModal","cursor","css","Image","logo","hangman0","hangman1","hangman2","hangman3","hangman4","hangman5","hangman6","width","alt","src","App","useState","Words","setLetters","setGameInProgress","mounted","setMounted","setGuesses","setWrongGuesses","value","setValue","setReset","setMessage","setWins","setLosses","console","log","chosenWord","Math","floor","random","length","chooseWord","checkLetter","e","key","test","tempGuesses","tempWrong","predGuess","predWrong","tempCorrectLetters","gameWin","forEach","toLowerCase","gameStatusCheck","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ceb6ed5c.chunk.js","sourcesContent":["import propTypes from 'prop-types'\r\n\r\nconst Button =({gameInProgress, onClick}) => {\r\n\r\n    return (\r\n             <button onClick = {onClick} className = 'btn'>{gameInProgress ? 'Reset Game' : 'Start Game'}</button>\r\n    )\r\n}\r\n// Button.defaultProps = {\r\n//     gameInProgress: false\r\n// }\r\n\r\nButton.propTypes = {\r\ngameInProgress : propTypes.bool\r\n}\r\n\r\nexport default Button\r\n","import PropTypes from 'prop-types'\r\nimport Button from './Button'\r\nconst Header = ({title, gameInProgress, toggleGame}) => {\r\n\r\n\r\n\r\n    return (\r\n        <header className = 'header'>\r\n            <h1> {title}</h1>\r\n            <Button onClick = {toggleGame} gameInProgress = {gameInProgress}/>\r\n            \r\n        </header>\r\n    )\r\n}\r\n\r\nHeader.propTypes = {\r\ntitle: PropTypes.string,\r\ngameInProgress: PropTypes.bool\r\n}\r\nHeader.defaultProps = {title: 'hangman', gameInProgress: false}\r\n\r\nexport default Header\r\n","const Letter = ({letter, display}) => {\r\n    //console.log(display);\r\n    //console.log(letter);\r\n    //console.log(display.includes(letter));\r\n    const color = display.includes(letter) ? 'red' : 'blue';\r\n    return (\r\n        <span className = 'letter' style={{color:color}}>\r\n            { color == 'red' ?  letter : '_'}  \r\n        </span>\r\n    )\r\n}\r\n\r\nexport default Letter\r\n","import Letter from './Letter'\r\nconst Word =({letters, guesses})=> {\r\n    // console.log(guesses);\r\n    if(letters == null){\r\n        letters = 'PRESS START!';\r\n        guesses = 'PRESS START!';\r\n    }\r\n\r\n    return (\r\n        <div className = 'letterWrapper'>\r\n            {letters.split('').map((l, i)=>(<Letter letter={l.toUpperCase()} key={i} display={guesses}/>))}\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nLetter.propTypes = {\r\n\r\n}\r\nWord.defaultProps = {\r\n    letters : ['Press Start!'],\r\n    guesses : ''\r\n}\r\n\r\nexport default Word\r\n\r\n","import PropTypes from 'prop-types'\r\n\r\nconst Display = ({wins, losses,gameState, guessedLetters, wrongGuesses}) => {\r\n    return (\r\n        <div>\r\n            {gameState ? 'game in progress' : 'game not in progress'}\r\n           <p> {` Letters Guessed:${guessedLetters}`}<span style={{float:'right'}}>{`Wins: ${wins}`}</span></p>\r\n           <p>{`Wrong Guesses remaining:  ${6 - wrongGuesses}`}<span style={{float:'right'}}>{`Losses: ${losses}`}</span></p>\r\n           \r\n           \r\n        </div>\r\n    )\r\n}\r\n\r\nDisplay.propTypes = {\r\n\r\n}\r\nDisplay.defaultProps = {\r\n    wins : 0,\r\n    losses: 0\r\n}\r\n\r\nexport default Display\r\n","import PropTypes from 'prop-types'\r\n\r\nconst Input = ({makeGuess, enabled,reset, handleChange, totalGuesses}) => {\r\n    return (\r\n        <input type= {reset ? \"reset\" : \"text\"}  className = 'input' onKeyUp={makeGuess} placeholder = 'Enter letters here' disabled={!enabled}>\r\n            \r\n        </input>\r\n    )\r\n}\r\n\r\nInput.propTypes = {\r\n\r\n}\r\n\r\nexport default Input\r\n","import PropTypes from 'prop-types'\r\nimport {FaTimes} from 'react-icons/fa'\r\nconst Modal = ({message, display, closeModal}) => {\r\n    if(!closeModal) closeModal = ()=>{return null}\r\n    return (\r\n\r\n        <div className = {`modal ${display ? 'show' : 'hide'} ${message.includes('won')? 'won' : 'lost'}`}>\r\n            <p><FaTimes onClick = {closeModal} className = 'close-modal' style={{color:'red', cursor: 'pointer'}}/> {message} </p>\r\n        </div>\r\n    )\r\n}\r\n\r\nModal.propTypes = {\r\n\r\n}\r\nModal.css ={\r\n    display: 'none'\r\n}\r\n\r\nModal.defaultProps = {\r\n    message: 'Nothing to show here',\r\n    closeModal : function(){return null}\r\n}\r\n\r\nexport default Modal\r\n","export default __webpack_public_path__ + \"static/media/hangman0.b42c1b72.bmp\";","export default __webpack_public_path__ + \"static/media/hangman1.4798aadd.bmp\";","export default __webpack_public_path__ + \"static/media/hangman2.e3caf770.bmp\";","export default __webpack_public_path__ + \"static/media/hangman3.5290741d.bmp\";","export default __webpack_public_path__ + \"static/media/hangman4.26e7efac.bmp\";","export default __webpack_public_path__ + \"static/media/hangman5.0d58d84f.bmp\";","export default __webpack_public_path__ + \"static/media/hangman6.7a9cbb7c.bmp\";","import PropTypes from 'prop-types'\r\nimport hangman0 from './../images/hangman0.bmp'\r\nimport hangman1 from './../images/hangman1.bmp'\r\nimport hangman2 from './../images/hangman2.bmp'\r\nimport hangman3 from './../images/hangman3.bmp'\r\nimport hangman4 from './../images/hangman4.bmp'\r\nimport hangman5 from './../images/hangman5.bmp'\r\nimport hangman6 from './../images/hangman6.bmp'\r\n\r\n\r\nconst Image = ({wrongGuesses}) => {\r\n    let logo;\r\n if(wrongGuesses == 0) logo = hangman0;\r\n else if(wrongGuesses == 1) logo = hangman1;\r\n else if(wrongGuesses == 2) logo = hangman2;\r\n else if(wrongGuesses == 3) logo = hangman3;\r\n else if(wrongGuesses == 4) logo = hangman4;\r\n else if(wrongGuesses == 5) logo = hangman5;\r\n else if(wrongGuesses == 6) logo = hangman6;\r\n    return (\r\n        <div>\r\n            <img width='100%' alt='hangman image' src= {logo}></img>\r\n        </div>\r\n    )\r\n}\r\n\r\nImage.propTypes = {\r\n\r\n}\r\nImage.defaultProps = {\r\n    wrongGuesses: 0\r\n}\r\nexport default Image\r\n","import React from 'react';\nimport Header from './Components/Header'\nimport Word from './Components/Word'\nimport {useState} from 'react'\nimport Display from './Components/Display'\nimport Input from './Components/Input'\nimport Modal from './Components/Modal'\nimport Image from './Components/Image'\n\n/*function App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  ); \n}*/\nfunction App(){\n  const [Words] = useState(['ANODYNE', 'MELANCHOLIA', 'APHASIA', 'BURBLING', 'ZAFTIG'])\n  const[letters, setLetters] = useState(['merry'])\n  const[gameInProgress, setGameInProgress] = useState(false);\n  const [mounted, setMounted] = useState(false);\n  const[guesses, setGuesses] = useState('');\n  const[wrongGuesses, setWrongGuesses] = useState(0)\n  const [value, setValue] = useState('')\n  const[reset, setReset] = useState(false);\n  const[message,setMessage] = useState('');\n  const[wins, setWins] = useState(0);\n  const[losses, setLosses] = useState(0);\n\n  const chooseWord = ()=>{\n    console.log(Words);\n    let chosenWord = Words[Math.floor(Math.random() * Words.length)]\n    setLetters(chosenWord);\n    console.log(letters);\n  }\n\n  const toggleGame = ()=>{\n    console.log('in toggle game function' + gameInProgress);\n    if(gameInProgress){\n      setGameInProgress(false);\n      setGuesses('');\n      setReset(true);\n      setWrongGuesses(0);\n    }else{\n      setGuesses('');\n      setWrongGuesses(0);\n       setGameInProgress(true);\n       chooseWord();\n       setReset(false);\n    }\n    console.log(gameInProgress);\n  }\n  const updateValue = ()=>{\nsetValue(guesses);\n  }\n  const startNewGame = ()=>{\n    console.log('hi');\n    setMounted(false);\n    toggleGame();\n  }\n\nconst gameStatusCheck = (predGuess, predWrong) =>{\n  console.log(letters);\n  console.log(predGuess);\n  console.log(predWrong);\n  let tempCorrectLetters = letters.split('');\n  let gameWin = true;\n  tempCorrectLetters.forEach(letter => {\n    if(! predGuess.includes(letter)) gameWin = false;\n  });\n  if(gameWin){\n    console.log('game won!');\n    setMessage(`You guessed ${letters.toLowerCase()}! Close this message to play again.`);\n    setWins(wins + 1)\n    setMounted(true);\n    //setReset(true);\n    //setGameInProgress(false);\n    toggleGame();\n  }else{\nif(predWrong >= 6){\n  console.log('game lost. womp womp womp');\n  setLosses(losses + 1)\n  setMessage(`Out of guesses! The word was ${letters.toLowerCase()}. Close this message to play again.`);\n  setMounted(true);\n  setGameInProgress(false);\n  \n\n}\n  }\n}\n\n  const checkLetter = (e)=>{\n    //  console.log('hi');\n    // console.log(gameInProgress); \n     console.log(e.key)\n    if(gameInProgress){\n  // console.log('game in progress');\n    // console.log(/[a-zA-Z]/g.test(e.key.toUpperCase()))\n    if(! /[^a-zA-Z]/g.test(e.key.toUpperCase()) && e.key.length === 1 && !guesses.includes(e.key)){\n      let tempGuesses = guesses;\n      console.log(tempGuesses)\n      tempGuesses = tempGuesses + e.key.toUpperCase();\n      console.log(tempGuesses);\n\n      setGuesses( tempGuesses)\n      console.log('acceptable keystroke');\n      console.log(e.key);\n      let tempWrong = wrongGuesses;\n      if(! letters.includes(e.key.toUpperCase())){\n        tempWrong++;\n        setWrongGuesses(wrongGuesses + 1);\n        console.log(wrongGuesses);\n      }\n      gameStatusCheck(tempGuesses, tempWrong);\n\n    }else{\n      console.log('unacceptable keystroke');\n    }\n    } else{\n      console.log('thinks game is not in progress');\n    } \n  }\n\n  return(\n    <div className = 'container' >\n\n      <Header toggleGame = {toggleGame} gameInProgress = {gameInProgress}/>\n      <Word guesses = {guesses} letters= { gameInProgress ? letters : null}/>\n      <Input wrongGuesses = {wrongGuesses} reset = {reset} value= {value} handleChange = {updateValue} enabled={gameInProgress} makeGuess={(e)=>{checkLetter(e)}}/>\n      <Display wins = {wins} losses = {losses} gameState = {gameInProgress} guessedLetters = {guesses} wrongGuesses = {wrongGuesses}/>\n      <Image wrongGuesses={wrongGuesses}/>\n      <Modal closeModal = {startNewGame} message={message} display={mounted}/>\n    </div>\n  )  \n\n\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <App />,document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}