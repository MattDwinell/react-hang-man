{"version":3,"sources":["Components/Button.js","Components/Header.js","Components/Letter.js","Components/Word.js","Components/Display.js","Components/Input.js","Components/Modal.js","images/Hangman0.bmp","images/Hangman1.bmp","images/Hangman2.bmp","images/Hangman3.bmp","images/Hangman4.bmp","images/Hangman5.bmp","images/Hangman6.bmp","Components/Image.js","Components/Footer.js","Components/WordDefinition.js","Components/About.js","App.js","reportWebVitals.js","index.js"],"names":["Button","gameInProgress","onClick","className","Header","title","toggleGame","location","useLocation","pathname","defaultProps","Letter","letter","color","display","includes","style","Word","letters","guesses","split","map","l","i","toUpperCase","propTypes","Display","wins","losses","gameState","guessedLetters","wrongGuesses","float","Input","makeGuess","enabled","reset","handleChange","totalGuesses","console","log","document","getElementsByClassName","type","onKeyUp","placeholder","disabled","Modal","message","closeModal","cursor","css","Image","logo","hangman0","hangman1","hangman2","hangman3","hangman4","hangman5","hangman6","marginTop","width","alt","src","Footer","to","Date","getFullYear","WordDefinition","word","definition","key","useState","toggle","setToggle","id","About","Words","Definitions","objArray","sort","a","b","obj","App","setLetters","setGameInProgress","mounted","setMounted","setGuesses","setWrongGuesses","value","setValue","setReset","setMessage","setWins","setLosses","chosenWord","Math","floor","random","length","chooseWord","updateValue","startNewGame","checkLetter","e","test","tempGuesses","tempWrong","predGuess","predWrong","tempCorrectLetters","gameWin","forEach","toLowerCase","gameStatusCheck","basename","process","exact","path","render","props","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","getElementById"],"mappings":"mNAqBeA,EAnBD,SAAC,GAA+B,IAA9BC,EAA6B,EAA7BA,eAAgBC,EAAa,EAAbA,QACxB,OAAID,EAMI,6BAJH,wBAAQC,QAAWA,EAASC,UAAY,MAAxC,SAA+CF,EAAiB,aAAe,gBCFtFG,EAAS,SAAC,GAAyC,IAAxCC,EAAuC,EAAvCA,MAAOJ,EAAgC,EAAhCA,eAAgBK,EAAgB,EAAhBA,WAC9BC,EAAWC,cAGjB,OACI,yBAAQL,UAAY,SAApB,UACI,mCAAME,KACiB,MAAtBE,EAASE,UAAoB,cAAC,EAAD,CAAQP,QAAWI,EAAYL,eAAkBA,QAU3FG,EAAOM,aAAe,CAACL,MAAO,UACVJ,gBAAgB,GAGrBG,QCZAO,EAZA,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,OAIPC,EAJ4B,EAAbC,QAICC,SAASH,GAAU,OAAS,YAClD,OACI,sBAAMT,UAAY,SAASa,MAAO,CAACH,MAAMA,GAAzC,SACgB,SAAVA,EAAoBD,EAAS,OCNrCK,EAAM,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,QAASC,EAAY,EAAZA,QAOnB,OALc,MAAXD,IACCA,EAAU,eACVC,EAAU,gBAIV,qBAAKhB,UAAY,gBAAjB,SACKe,EAAQE,MAAM,IAAIC,KAAI,SAACC,EAAGC,GAAJ,OAAS,cAAC,EAAD,CAAQX,OAAQU,EAAEE,cAAuBV,QAASK,GAAZI,SAMlFZ,EAAOc,UAAY,GAGnBR,EAAKP,aAAe,CAChBQ,QAAU,CAAC,gBACXC,QAAU,IAGCF,QCtBTS,EAAU,SAAC,GAA4D,IAA3DC,EAA0D,EAA1DA,KAAMC,EAAoD,EAApDA,OAAOC,EAA6C,EAA7CA,UAAWC,EAAkC,EAAlCA,eAAgBC,EAAkB,EAAlBA,aACtD,OACI,gCACKF,EAAY,mBAAqB,uBACnC,6DAAyBC,GAAiB,sBAAMd,MAAO,CAACgB,MAAM,SAApB,yBAAwCL,QAClF,kEAAiC,EAAII,GAAe,sBAAMf,MAAO,CAACgB,MAAM,SAApB,2BAA0CJ,YAczGF,EAAQhB,aAAe,CACnBiB,KAAO,EACPC,OAAQ,GAGGF,QCNAO,EAlBD,SAAC,GAA4D,IAA3DC,EAA0D,EAA1DA,UAAWC,EAA+C,EAA/CA,QAAQC,EAAuC,EAAvCA,MAAuC,EAAhCC,aAAgC,EAAlBC,aAGpD,OAFCC,QAAQC,IAAIC,SAASC,uBAAuB,SAAS,IACrDH,QAAQC,IAAIJ,GAET,uBAAQO,KAAOP,EAAQ,QAAU,OAASjC,UAAY,QAAQyC,QAASV,EAAWW,YAAc,qBAAqBC,UAAWX,K,QCJlIY,EAAQ,SAAC,GAAoC,IAAnCC,EAAkC,EAAlCA,QAASlC,EAAyB,EAAzBA,QAASmC,EAAgB,EAAhBA,WAE9B,OADIA,IAAYA,EAAa,WAAK,OAAO,OAGrC,qBAAK9C,UAAS,gBAAaW,EAAU,OAAS,OAAhC,YAA0CkC,EAAQjC,SAAS,aAAc,MAAQ,QAA/F,SACI,8BAAG,cAAC,IAAD,CAASb,QAAW+C,EAAY9C,UAAY,cAAca,MAAO,CAACH,MAAM,MAAOqC,OAAQ,aAA1F,IAAyGF,EAAzG,yIAUZD,EAAMI,IAAK,CACPrC,QAAS,QAGbiC,EAAMrC,aAAe,CACjBsC,QAAS,uBACTC,WAAa,WAAW,OAAO,OAGpBF,QC1BA,MAA0B,qCCA1B,MAA0B,qCCA1B,MAA0B,qCCA1B,MAA0B,qCCA1B,MAA0B,qCCA1B,MAA0B,qCCA1B,MAA0B,qCCUnCK,EAAQ,SAAC,GAAoB,IAC3BC,EADQtB,EAAkB,EAAlBA,aASZ,OAPiB,IAAjBA,EAAoBsB,EAAOC,EACL,IAAjBvB,EAAoBsB,EAAOE,EACV,IAAjBxB,EAAoBsB,EAAOG,EACV,IAAjBzB,EAAoBsB,EAAOI,EACV,IAAjB1B,EAAoBsB,EAAOK,EACV,IAAjB3B,EAAoBsB,EAAOM,EACV,IAAjB5B,IAAoBsB,EAAOO,GAE5B,qBAAK5C,MAAS,CAAC6C,UAAW,UAA1B,SACI,qBAAKC,MAAM,OAAOC,IAAI,sBAAsBC,IAAMX,OAQ9DD,EAAM1C,aAAe,CACjBqB,aAAc,GAEHqB,QClBAa,EAZA,WACX,IAAM1D,EAAWC,cACjB,OACI,mCACI,cAAC,IAAD,CAAML,UAAU,cAAc+D,GAAE,WAA4B,MAAtB3D,EAASE,SAAmB,QAAU,IAA5E,SAAyG,MAAtBF,EAASE,SAAmB,QAAU,aACzH,kDAAsB,IAAI0D,MAAOC,cAAjC,2BCiBGC,EArBQ,SAAC,GAA6B,IAA5BC,EAA2B,EAA3BA,KAAMC,EAAqB,EAArBA,WAAYC,EAAS,EAATA,IAAS,EACpBC,oBAAS,GADW,mBACzCC,EADyC,KACjCC,EADiC,KAMhD,OACI,qCACI,wBAAQzE,QAAW,WALvByE,GAKoCD,IAASvE,UAAY,UAArD,SAAgEmE,IAC/DI,GAAU,oBAAGE,GAAKJ,EAAKrE,UAAY,aAAzB,cAAwCoE,SCShDM,EAnBD,SAAC,GAA0B,IAAzBC,EAAwB,EAAxBA,MAAOC,EAAiB,EAAjBA,YACbC,EAAWF,EAAMzD,KAAI,SAACiD,EAAM/C,GAAP,MAAY,CAAC+C,KAAMA,EAC9CC,WAAYQ,EAAYxD,OAKxB,OAJAgB,QAAQC,IAAIwC,GACZA,EAASC,MAAK,SAACC,EAAEC,GAAH,OAASD,EAAEZ,KAAOa,EAAEb,KAAQ,EAAMa,EAAEb,KAAOY,EAAEZ,MAAS,EAAI,KACxE/B,QAAQC,IAAIwC,GAGR,gCACA,0PACHA,EAAS3D,KAAI,SAAC+D,EAAK7D,GAAN,OAAW,cAAE,EAAF,CAAyB+C,KAAMc,EAAId,KAAMC,WAAca,EAAIb,YAArChD,MAC/C,uBAAK,uBACL,oJAAsH,uBAAtH,iFCgKW8D,MA9If,WAAe,IAAD,EACIZ,mBAAS,CAAC,UAAW,cAAe,UAAW,WAAY,SAAS,WAAW,YAAY,aAAa,YAAY,YAAY,YAAY,SAAS,cAAc,cAAc,WAAW,YAAY,gBAAgB,WAAW,gBAAgB,WAAW,WAAW,SAAS,YAAY,gBAAgB,aAAa,YAAY,MAAM,YAAtVK,EADK,sBAGUL,mBAAS,CAAC,mFAAmF,oCAAqC,wEAAwE,8CAA+C,8BAA8B,kDAAkD,kDAAkD,2DAA2D,2BAA2B,6DAA6D,sCAAsC,yGAAyG,qCAAqC,sBAAsB,6DAA6D,+DAA+D,6BAA6B,gCAAgC,uCAAuC,0DAA0D,mBAAmB,kEAAkE,iEAAiE,8CAA8C,oEAAoE,6EAA6E,uGAAuG,mDAA77CM,EAHK,sBAKiBN,mBAAS,CAAC,UAL3B,mBAKNvD,EALM,KAKGoE,EALH,OAM+Bb,oBAAS,GANxC,mBAMNxE,EANM,KAMUsF,EANV,OAOkBd,oBAAS,GAP3B,mBAOLe,EAPK,KAOIC,EAPJ,OAQiBhB,mBAAS,IAR1B,mBAQNtD,EARM,KAQGuE,EARH,OAS2BjB,mBAAS,GATpC,mBASN1C,EATM,KASQ4D,EATR,OAUclB,mBAAS,IAVvB,mBAULmB,EAVK,KAUEC,EAVF,OAWapB,oBAAS,GAXtB,mBAWNrC,EAXM,KAWC0D,EAXD,OAYgBrB,mBAAS,IAZzB,mBAYNzB,EAZM,KAYE+C,EAZF,OAaWtB,mBAAS,GAbpB,mBAaN9C,EAbM,KAaAqE,EAbA,OAcevB,mBAAS,GAdxB,oBAcN7C,GAdM,MAcEqE,GAdF,MAwBN3F,GAAa,WACjBiC,QAAQC,IAAI,0BAA4BvC,GACrCA,GACDsF,GAAkB,GAClBG,EAAW,IACXI,GAAS,GACTH,EAAgB,KAEhBD,EAAW,IACXC,EAAgB,GACfJ,GAAkB,GAjBJ,WACjBhD,QAAQC,IAAIsC,GACZ,IAAIoB,EAAapB,EAAMqB,KAAKC,MAAMD,KAAKE,SAAWvB,EAAMwB,SACxDhB,EAAWY,GACX3D,QAAQC,IAAItB,GAcTqF,GACAT,GAAS,IAEZvD,QAAQC,IAAIvC,IAERuG,GAAc,WACtBX,EAAS1E,IAEDsF,GAAe,WACnBlE,QAAQC,IAAI,MACZiD,GAAW,GACXnF,MAkCIoG,GAAc,SAACC,GAInB,GADCpE,QAAQC,IAAImE,EAAEnC,KACZvE,EAGH,GAAK,aAAa2G,KAAKD,EAAEnC,IAAIhD,gBAAmC,IAAjBmF,EAAEnC,IAAI8B,QAAiBnF,EAAQJ,SAAS4F,EAAEnC,IAAIhD,eAkB3Fe,QAAQC,IAAI,8BAlB8F,CAC1G,IAAIqE,EAAc1F,EAClBoB,QAAQC,IAAIqE,GACZA,GAA4BF,EAAEnC,IAAIhD,cAClCe,QAAQC,IAAIqE,GAEZnB,EAAYmB,GACZtE,QAAQC,IAAI,wBACZD,QAAQC,IAAImE,EAAEnC,KACd,IAAIsC,EAAY/E,EACXb,EAAQH,SAAS4F,EAAEnC,IAAIhD,iBAC1BsF,IACAnB,EAAgB5D,EAAe,GAC/BQ,QAAQC,IAAIT,IAnDI,SAACgF,EAAWC,GAClCzE,QAAQC,IAAItB,GACZqB,QAAQC,IAAIuE,GACZxE,QAAQC,IAAIwE,GACZ,IAAIC,EAAqB/F,EAAQE,MAAM,IACnC8F,GAAU,EACdD,EAAmBE,SAAQ,SAAAvG,GACpBmG,EAAUhG,SAASH,KAASsG,GAAU,MAE1CA,GACD3E,QAAQC,IAAI,aACZuD,EAAW,0BAAD,OAA2B7E,EAAQkG,cAAnC,yCACVpB,EAAQrE,EAAO,GACf8D,GAAW,GAGXnF,MAED0G,GAAa,IACdzE,QAAQC,IAAI,6BACZyD,GAAUrE,GAAS,GACnBmE,EAAW,gCAAD,OAAiC7E,EAAQkG,cAAzC,wCACV3B,GAAW,GACXF,GAAkB,GAClBO,GAAS,IA6BLuB,CAAgBR,EAAaC,QAM7BvE,QAAQC,IAAI,mCAIhB,OACE,eAAC,IAAD,CAAQ8E,SAAUC,kBAAlB,UACA,sBAAKpH,UAAY,YAAjB,UACA,cAAC,EAAD,CAAQG,WAAcA,GAAYL,eAAkBA,IAIpD,cAAC,IAAD,CAAOuH,OAAK,EAACC,KAAM,IAAMC,OAAQ,SAACC,GAAD,OAC/B,qCAEA,cAAC,EAAD,CAAMxG,QAAWA,EAASD,QAAWjB,EAAiBiB,EAAU,OAChE,cAAC,EAAD,CAAOa,aAAgBA,EAAcK,MAASA,EAAOwD,MAAQA,EAAOvD,aAAgBmE,GAAarE,QAASlC,EAAgBiC,UAAW,SAACyE,GAAKD,GAAYC,MACvJ,cAAC,EAAD,CAAShF,KAAQA,EAAMC,OAAUA,GAAQC,UAAa5B,EAAgB6B,eAAkBX,EAASY,aAAgBA,IACjH,cAAC,EAAD,CAAOA,aAAcA,IACrB,cAAC,EAAD,CAAOkB,WAAcwD,GAAczD,QAASA,EAASlC,QAAS0E,UAGhE,cAAC,IAAD,CAAOiC,KAAQ,SAAUC,OAAQ,SAACC,GAAD,OAC/B,cAAC,EAAD,CAAO7C,MAASA,EAAOC,YAAeA,UAIxC,cAAC,EAAD,QC1JW6C,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASX,OACL,cAAC,EAAD,IAAQjF,SAAS6F,eAAe,SAMpCV,M","file":"static/js/main.cfdc44b3.chunk.js","sourcesContent":["import propTypes from 'prop-types'\r\n\r\nconst Button =({gameInProgress, onClick}) => {\r\n        if(!gameInProgress){\r\n    return (\r\n             <button onClick = {onClick} className = 'btn'>{gameInProgress ? 'Reset Game' : 'Start Game'}</button> \r\n    )\r\n        }else{\r\n            return(\r\n                <></>\r\n            )\r\n        }\r\n}\r\n// Button.defaultProps = {\r\n//     gameInProgress: false\r\n// }\r\n\r\nButton.propTypes = {\r\ngameInProgress : propTypes.bool\r\n}\r\n\r\nexport default Button\r\n","import PropTypes from 'prop-types'\r\nimport Button from './Button'\r\nimport {useLocation} from 'react-router-dom'\r\nconst Header = ({title, gameInProgress, toggleGame}) => {\r\n    const location = useLocation()\r\n\r\n\r\n    return (\r\n        <header className = 'header'>\r\n            <h1> {title}</h1>\r\n           { location.pathname === '/' &&(<Button onClick = {toggleGame} gameInProgress = {gameInProgress}/>)}\r\n            \r\n        </header>\r\n    )\r\n}\r\n\r\nHeader.propTypes = {\r\ntitle: PropTypes.string,\r\ngameInProgress: PropTypes.bool\r\n}\r\nHeader.defaultProps = {title: 'Hangman',\r\n                    gameInProgress: false\r\n}\r\n\r\nexport default Header\r\n","const Letter = ({letter, display}) => {\r\n    //console.log(display);\r\n    //console.log(letter);\r\n    //console.log(display.includes(letter));\r\n    const color = display.includes(letter) ? 'blue' : 'steelblue';\r\n    return (\r\n        <span className = 'letter' style={{color:color}}>\r\n            { color === 'blue' ?  letter : '_'}  \r\n        </span>\r\n    )\r\n}\r\n\r\nexport default Letter\r\n","import Letter from './Letter'\r\nconst Word =({letters, guesses})=> {\r\n    // console.log(guesses);\r\n    if(letters == null){\r\n        letters = 'PRESS START!';\r\n        guesses = 'PRESS START!';\r\n    }\r\n\r\n    return (\r\n        <div className = 'letterWrapper'>\r\n            {letters.split('').map((l, i)=>(<Letter letter={l.toUpperCase()} key={i} display={guesses}/>))}\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nLetter.propTypes = {\r\n\r\n}\r\nWord.defaultProps = {\r\n    letters : ['Press Start!'],\r\n    guesses : ''\r\n}\r\n\r\nexport default Word\r\n\r\n","import PropTypes from 'prop-types'\r\n\r\nconst Display = ({wins, losses,gameState, guessedLetters, wrongGuesses}) => {\r\n    return (\r\n        <div>\r\n            {gameState ? 'game in progress' : 'game not in progress'}\r\n           <p> {` Letters Guessed:${guessedLetters}`}<span style={{float:'right'}}>{`Wins: ${wins}`}</span></p>\r\n           <p>{`Wrong Guesses remaining:  ${6 - wrongGuesses}`}<span style={{float:'right'}}>{`Losses: ${losses}`}</span></p>\r\n           \r\n           \r\n        </div>\r\n    )\r\n}\r\n\r\nDisplay.propTypes = {\r\n    wins: PropTypes.number,\r\n    losses: PropTypes.number,\r\n    gameState: PropTypes.bool,\r\n    guessedLetters: PropTypes.string,\r\n    wrongGuesses: PropTypes.number\r\n}\r\nDisplay.defaultProps = {\r\n    wins : 0,\r\n    losses: 0\r\n}\r\n\r\nexport default Display\r\n","import PropTypes from 'prop-types'\r\n\r\nconst Input = ({makeGuess, enabled,reset, handleChange, totalGuesses}) => {\r\n     console.log(document.getElementsByClassName('input')[0])\r\n     console.log(reset);\r\n    return (\r\n        <input  type= {reset ? \"reset\" : \"text\"}  className = 'input' onKeyUp={makeGuess} placeholder = 'Enter letters here' disabled={!enabled}>\r\n            \r\n        </input>\r\n    )\r\n}\r\n\r\nInput.propTypes = {\r\nenabled: PropTypes.bool,\r\nreset: PropTypes.bool,\r\ntotalGuesses: PropTypes.number,\r\nhandleChange: PropTypes.func\r\n}\r\n\r\n\r\nexport default Input\r\n","import PropTypes from 'prop-types'\r\nimport {FaTimes} from 'react-icons/fa'\r\nconst Modal = ({message, display, closeModal}) => {\r\n    if(!closeModal) closeModal = ()=>{return null}\r\n    return (\r\n\r\n        <div className = {`modal ${display ? 'show' : 'hide'} ${message.includes('correctly')? 'won' : 'lost'}`}>\r\n            <p><FaTimes onClick = {closeModal} className = 'close-modal' style={{color:'red', cursor: 'pointer'}}/> {message} If you're interested in what a word means, you can find its definition on the about page, located at the bottom of the screen. </p>\r\n        </div>\r\n    )\r\n}\r\n\r\nModal.propTypes = {\r\n    message: PropTypes.string,\r\n    display: PropTypes.bool,\r\n    closeModal: PropTypes.func\r\n}\r\nModal.css ={\r\n    display: 'none'\r\n}\r\n\r\nModal.defaultProps = {\r\n    message: 'Nothing to show here',\r\n    closeModal : function(){return null}\r\n}\r\n\r\nexport default Modal\r\n","export default __webpack_public_path__ + \"static/media/Hangman0.2886907f.bmp\";","export default __webpack_public_path__ + \"static/media/Hangman1.ece96d95.bmp\";","export default __webpack_public_path__ + \"static/media/Hangman2.b3c7ab20.bmp\";","export default __webpack_public_path__ + \"static/media/Hangman3.48e40931.bmp\";","export default __webpack_public_path__ + \"static/media/Hangman4.a22e4df6.bmp\";","export default __webpack_public_path__ + \"static/media/Hangman5.aa6d323a.bmp\";","export default __webpack_public_path__ + \"static/media/Hangman6.eee332ee.bmp\";","import PropTypes from 'prop-types'\r\nimport hangman0 from './../images/Hangman0.bmp'\r\nimport hangman1 from './../images/Hangman1.bmp'\r\nimport hangman2 from './../images/Hangman2.bmp'\r\nimport hangman3 from './../images/Hangman3.bmp'\r\nimport hangman4 from './../images/Hangman4.bmp'\r\nimport hangman5 from './../images/Hangman5.bmp'\r\nimport hangman6 from './../images/Hangman6.bmp'\r\n\r\n\r\nconst Image = ({wrongGuesses}) => {\r\n    let logo;\r\n if(wrongGuesses === 0) logo = hangman0;\r\n else if(wrongGuesses === 1) logo = hangman1;\r\n else if(wrongGuesses === 2) logo = hangman2;\r\n else if(wrongGuesses === 3) logo = hangman3;\r\n else if(wrongGuesses === 4) logo = hangman4;\r\n else if(wrongGuesses === 5) logo = hangman5;\r\n else if(wrongGuesses === 6) logo = hangman6;\r\n    return (\r\n        <div style = {{marginTop: '1.5rem'}}>\r\n            <img width='100%' alt='hangman being built' src= {logo}></img>\r\n        </div>\r\n    )\r\n}\r\n\r\nImage.propTypes = {\r\nwrongGuesses: PropTypes.number\r\n}\r\nImage.defaultProps = {\r\n    wrongGuesses: 0\r\n}\r\nexport default Image\r\n","import {Link} from 'react-router-dom'\r\nimport {useLocation} from 'react-router-dom'\r\nconst Footer = () => {\r\n    const location = useLocation()\r\n    return (\r\n        <footer>\r\n            <Link className='styled-link' to={`/${location.pathname === '/' ? 'about' : ''}`}>{location.pathname === '/' ? 'About' : 'Mainpage'}</Link>\r\n            <p> Copyright &copy; {new Date().getFullYear()}, Matthew Dwinell</p>\r\n        </footer>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default Footer\r\n","import PropTypes from 'prop-types'\r\nimport {useState} from 'react'\r\n\r\nconst WordDefinition = ({word, definition, key}) => {\r\n    const [toggle, setToggle] = useState(false)\r\n    const showHide = (state)=>{\r\n        setToggle(!state)\r\n    }\r\n    \r\n    return (\r\n        <>\r\n            <button onClick = {()=>showHide(toggle)} className = 'btn def'>{word}</button>\r\n            {toggle && <p id= {key} className = 'definition'> {definition}</p>}\r\n        </>   \r\n        \r\n    )\r\n}\r\n\r\nWordDefinition.propTypes = {\r\nword: PropTypes.string,\r\ndefinition: PropTypes.string,\r\nkey: PropTypes.number\r\n}\r\n\r\nexport default WordDefinition\r\n","import WordDefinition from './WordDefinition'\r\n\r\nconst About = ({Words, Definitions}) => {\r\n    const objArray = Words.map((word, i)=>({word: word,\r\n    definition: Definitions[i]}));\r\n    console.log(objArray);\r\n    objArray.sort((a,b)=> (a.word > b.word) ? 1 : ((b.word > a.word) ? -1 : 0))\r\n    console.log(objArray);\r\n\r\n    return (\r\n        <div>\r\n        <p>Okay, I admit it. These are some of the most esoteric words I've come across while reading, so you've been playing hangman on hardmode. Below are all of the words in the wordbank and their definitions. Happy learning!</p>\r\n    {objArray.map((obj, i)=> < WordDefinition key={i} word={obj.word} definition = {obj.definition} />)}\r\n    <br/><br/>\r\n    <p>This Project was created with React.js and utilizes the following libraries: React Router, PropTypes, and Favicons.<br/> All images courtesy of Callie Yohn, who draws better than I ever will!</p>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default About\r\n","import React from 'react';\nimport {useState} from 'react'\nimport {HashRouter as Router, Link, Route} from 'react-router-dom'\nimport Header from './Components/Header'\nimport Word from './Components/Word'\nimport Display from './Components/Display'\nimport Input from './Components/Input'\nimport Modal from './Components/Modal'\nimport Image from './Components/Image'\nimport Footer from './Components/Footer'\nimport About from './Components/About'\n\n/*function App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  ); \n}*/\nfunction App(){\n  const [Words] = useState(['ANODYNE', 'MELANCHOLIA', 'APHASIA', 'BURBLING', 'ZAFTIG',\"OSSIFIED\",\"ETIOLATED\",\"EXUDATIONS\",\"SHAMBOLIC\",\"PSORIATIC\",\"SYNCRETIC\",\"SYZYGY\",\"INELUCTABLE\",\"ERUCTATIONS\",\"SCIOLIST\",\"IMBROGLIO\",\"AGGLUTINATION\",\"BATHETIC\",\"PUSILLANIMOUS\",\"NACREOUS\",\"MORBIFIC\",\"TUMULI\",\"SEPHARDIC\",\"RECRUDESCENCE\",\"AMANUENSIS\",\"ONANISTIC\",\"WEN\",\"LETHEAN\",])\n\n  const [Definitions] = useState(['Inoffensive, normally deliberately so. Can also refer to a medicinal painkiller.','Deep sadness or gloom. Melancholy', 'Inability to understand speech or express it, caused by brain damage.','A continous murmruing noise, as of a river.', 'Pleasingly plump and round.','Turned into bone, having become rigid or fixed.','Feeble, pale, drawn out due to a lack of light.',\"Fluids emitted by an organism through a pore or a wound.\",\"Chaotic or disorganized.\",\"Of psoriasis, characterized by itchiness and flaking skin.\",\"A union of two different religions.\",\"A pair of connected or corresponding things. Also, a connjuction or opposition, especially of the sun.\",\"Inescapable, unable to be avoided.\",\"Burps. That is all.\",\"Someone who pretends to be knowledgeable or well-informed.\",\"An extremely confused, complicated, or embrassing situation.\",\"The clumping of particles.\",\"Anticlimactic, Dissapointing.\",\"Cowardly, showing a lack of courage.\",\"Pearlescent, having a color similiar to that of a pearl\",\"Disease causing.\",\"ancient burial mounds or barrows. the singular form is tumulus.\",\"Pertaining to a subset of Jews whose ancestors lived in Spain.\",\"The recurrence of an undesirable condition.\",\"A literary or artistic assitant, often one who copies manuscripts\",\"Pertaining to masturbation. pointless, self-absorbed, self-congratulatory.\",\"Nowadays known as a boil or swelling on the skin, it used to mean an extremely large or crowded city\",\"Causing oblivion or forgetfulness of the past.\"])\n\n  const[letters, setLetters] = useState(['merry'])\n  const[gameInProgress, setGameInProgress] = useState(false);\n  const [mounted, setMounted] = useState(false);\n  const[guesses, setGuesses] = useState('');\n  const[wrongGuesses, setWrongGuesses] = useState(0)\n  const [value, setValue] = useState('')\n  const[reset, setReset] = useState(false);\n  const[message,setMessage] = useState('');\n  const[wins, setWins] = useState(0);\n  const[losses, setLosses] = useState(0);\n\n\n  const chooseWord = ()=>{\n    console.log(Words);\n    let chosenWord = Words[Math.floor(Math.random() * Words.length)]\n    setLetters(chosenWord);\n    console.log(letters);\n  }\n\n  const toggleGame = ()=>{\n    console.log('in toggle game function' + gameInProgress);\n    if(gameInProgress){\n      setGameInProgress(false);\n      setGuesses('');\n      setReset(true);\n      setWrongGuesses(0);\n    }else{\n      setGuesses('');\n      setWrongGuesses(0);\n       setGameInProgress(true);\n       chooseWord();\n       setReset(false);\n    }\n    console.log(gameInProgress);\n  }\n  const updateValue = ()=>{\nsetValue(guesses);\n  }\n  const startNewGame = ()=>{\n    console.log('hi');\n    setMounted(false);\n    toggleGame();\n  }\n\nconst gameStatusCheck = (predGuess, predWrong) =>{\n  console.log(letters);\n  console.log(predGuess);\n  console.log(predWrong);\n  let tempCorrectLetters = letters.split('');\n  let gameWin = true;\n  tempCorrectLetters.forEach(letter => {\n    if(! predGuess.includes(letter)) gameWin = false;\n  });\n  if(gameWin){\n    console.log('game won!');\n    setMessage(`You correctly guessed \"${letters.toLowerCase()}\"! Close this message to play again.`);\n    setWins(wins + 1)\n    setMounted(true);\n    //setReset(true);\n    //setGameInProgress(false);\n    toggleGame();\n  }else{\nif(predWrong >= 6){\n  console.log('game lost. womp womp womp');\n  setLosses(losses + 1)\n  setMessage(`Out of guesses! The word was ${letters.toLowerCase()}. Close this message to play again.`);\n  setMounted(true);\n  setGameInProgress(false);\n  setReset(true);\n  \n\n}\n  }\n}\n\n  const checkLetter = (e)=>{\n    //  console.log('hi');\n    // console.log(gameInProgress); \n     console.log(e.key)\n    if(gameInProgress){\n  // console.log('game in progress');\n    // console.log(/[a-zA-Z]/g.test(e.key.toUpperCase()))\n    if(! /[^a-zA-Z]/g.test(e.key.toUpperCase()) && e.key.length === 1 && !guesses.includes(e.key.toUpperCase())){\n      let tempGuesses = guesses;\n      console.log(tempGuesses)\n      tempGuesses = tempGuesses + e.key.toUpperCase();\n      console.log(tempGuesses);\n\n      setGuesses( tempGuesses)\n      console.log('acceptable keystroke');\n      console.log(e.key);\n      let tempWrong = wrongGuesses;\n      if(! letters.includes(e.key.toUpperCase())){\n        tempWrong++;\n        setWrongGuesses(wrongGuesses + 1);\n        console.log(wrongGuesses);\n      }\n      gameStatusCheck(tempGuesses, tempWrong);\n\n    }else{\n      console.log('unacceptable keystroke');\n    }\n    } else{\n      console.log('thinks game is not in progress');\n    } \n  }\n\n  return(\n    <Router basename={process.env.PUBLIC_URL}>\n    <div className = 'container' >\n    <Header toggleGame = {toggleGame} gameInProgress = {gameInProgress}/>\n\n     \n    \n    <Route exact path={'/'}  render={(props)=>(\n      <>\n     \n      <Word guesses = {guesses} letters= { gameInProgress ? letters : null}/>\n      <Input wrongGuesses = {wrongGuesses} reset = {reset} value= {value} handleChange = {updateValue} enabled={gameInProgress} makeGuess={(e)=>{checkLetter(e)}}/>\n      <Display wins = {wins} losses = {losses} gameState = {gameInProgress} guessedLetters = {guesses} wrongGuesses = {wrongGuesses}/>\n      <Image wrongGuesses={wrongGuesses}/>\n      <Modal closeModal = {startNewGame} message={message} display={mounted}/>\n      </>\n    )}/>\n    <Route path = {'/about'} render={(props)=>(\n      <About Words = {Words} Definitions = {Definitions}/>\n\n    )}/>\n    </div> \n    <Footer/>\n    </Router>\n  )  \n\n\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <App />,document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}